{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}


(cell) shift_text(cell text, int shift) asm """
  26 PUSHINT
  MOD
  DUP
  1 PUSHINT
  89 PUSHINT
  REPEAT:<{
    TUCK
    INC
  }>

  s1 s0 XCPU
  ISPOS
  IF:<{
    DUP
    26 PUSHINT
    SUBR
    BLKSWX
  }>ELSE<{
    DROP
  }>

  91 PUSHINT
  31 PUSHINT
  REPEAT:<{
    DUP
    INC
  }>

  ZERO
  s0 123 s() XCHG
  DUP
  ISPOS
  IF:<{
    DUP
    26 PUSHINT
    SUBR
    BLKSWX
  }>ELSE<{
    DROP
  }>

  123 PUSHINT
  128 PUSHINT
  REPEAT:<{
    DUP
    INC
  }>

  TUPLEVAR // stack = text map

  NEWC
  ROT
  CTOS // map builder slice

  DUP
  SBITS
  3 RSHIFT#
  REPEAT:<{ // map builder slice
    8 LDU
    s3 s1 PUXC
    INDEXVAR
    ROT
    8 STU
    SWAP
  }>

  // builder map builder1 slice1 builder

  DUP
  SDEPTH
  REPEAT:<{
    LDREFRTOS
    NIP
    NEWC

    s3 s0 s0 XCHG3

    DUP
    SBITS
    3 RSHIFT#
    REPEAT:<{ // map builder slice
      8 LDU
      s3 s1 PUXC
      INDEXVAR
      ROT
      8 STU
      SWAP
    }>
  }> 

  // builder0 ... builder_n-1 map builder_n slice 
  
  ROT
  DROP2
  DEPTH
  DEC
  REPEAT:<{ STBREFR }>
  ENDC
""";

  






;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return shift_text(text, shift);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return shift_text(text, - shift);
}
