{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  tuple stack = null();
  slice slc = text.begin_parse();

  int depth = slc.slice_depth();

  repeat (depth) {
    stack~push_back(slc);
    slc = slc~load_ref().begin_parse();
  }

  builder out = begin_cell();
  repeat (slc.slice_bits() / 8) {
    int letter = slc~load_uint(8);

    if ((65 <= letter) & (letter <= 90)) { ;; A-Z
      letter = (letter + shift - 65) % 26 + 65;
    } else {
      if ((97 <= letter) & (letter <= 122)) { ;; a-z
        letter = (letter + shift - 97) % 26 + 97;
      }
    }

    out~store_uint(letter, 8);
  }

  cell tail = out.end_cell();

  repeat (depth) {
    out = begin_cell();
    slc = stack~pop_back();
    repeat (slc.slice_bits() / 8) {
      int letter = slc~load_uint(8);

      if ((65 <= letter) & (letter <= 90)) { ;; A-Z
        letter = (letter + shift - 65) % 26 + 65;
      } else {
        if ((97 <= letter) & (letter <= 122)) { ;; a-z
          letter = (letter + shift - 97) % 26 + 97;
        }
      }

      out~store_uint(letter, 8);
    }
    out = out.store_ref(tail);
    tail = out.end_cell();
  }

  return tail;
}


;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  tuple stack = null();
  slice slc = text.begin_parse();

  int depth = slc.slice_depth();

  repeat (depth) {
    stack~push_back(slc);
    slc = slc~load_ref().begin_parse();
  }

  builder out = begin_cell();
  repeat (slc.slice_bits() / 8) {
    int letter = slc~load_uint(8);

    if ((65 <= letter) & (letter <= 90)) { ;; A-Z
      letter = (letter - shift - 65) % 26 + 65;
    } else {
      if ((97 <= letter) & (letter <= 122)) { ;; a-z
        letter = (letter - shift - 97) % 26 + 97;
      }
    }

    out~store_uint(letter, 8);
  }

  cell tail = out.end_cell();

  repeat (depth) {
    out = begin_cell();
    slc = stack~pop_back();
    repeat (slc.slice_bits() / 8) {
      int letter = slc~load_uint(8);

      if ((65 <= letter) & (letter <= 90)) { ;; A-Z
        letter = (letter - shift - 65) % 26 + 65;
      } else {
        if ((97 <= letter) & (letter <= 122)) { ;; a-z
          letter = (letter - shift - 97) % 26 + 97;
        }
      }

      out~store_uint(letter, 8);
    }
    out = out.store_ref(tail);
    tail = out.end_cell();
  }

  return tail;
}

