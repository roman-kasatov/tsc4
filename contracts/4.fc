{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";


(int, ()) shift_letter(int letter, int shift) inline {
  if (97 <= letter) { ;; a-z
    if (letter <= 122) {
      letter = (letter + shift - 97) % 26 + 97;
    }
  } else {
    if (65 <= letter) { ;; A-Z
      if (letter <= 90) {
        letter = (letter + shift - 65) % 26 + 65;
      }
    }
  }
  return (letter, ());
}

(slice, builder) shift_slice(slice slc, builder out, int shift) inline {
  repeat (slc.slice_bits() / 8) {
    int letter = slc~load_uint(8);

    letter~shift_letter(shift);

    out~store_uint(letter, 8);
  }
  return (slc, out);
}

(cell) shift_text(cell text, int shift) inline {
  tuple stack = null();
  slice slc = text.begin_parse();

  int depth = slc.slice_depth();

  builder out = begin_cell();
  out~store_uint(0, 32);
  slc~skip_bits(32);
  (slc, out) = shift_slice(slc, out, shift);

  repeat (depth) {
    slc = slc~load_ref().begin_parse();
    stack~push_back(out);
    out = begin_cell();
    (slc, out) = shift_slice(slc, out, shift);
  }

  cell tail = out.end_cell();
  repeat (depth) {
    out = stack~pop_back();
    out = out.store_ref(tail);
    tail = out.end_cell();
  }

  return tail;
}


;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {

  return shift_text(text, shift);
}


;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {

  return shift_text(text, (- shift) % 26);
}

