{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

(int) shift_letter(int shift, int letter) inline {
  if ((65 <= letter) & (letter <= 90)) { ;; A-Z
    return (letter + shift - 65) % 26 + 65;
  }
  if ((97 <= letter) & (letter <= 122)) { ;; a-z
    return (letter + shift - 97) % 26 + 97;
  }
  return letter;
}

(cell) shift_text(int shift, cell text) {
  tuple stack = null();
  slice slc = text.begin_parse();
  slc.skip_bits(32);

  builder out = begin_cell().store_uint(0, 32);
  int flag = true;
  while (flag) {
    while (~ slc.slice_data_empty?()) {
      int letter = slc~load_uint(8);
      letter = shift_letter(shift, letter);
      out~store_uint(letter, 8);
    }

    if (slc.slice_refs_empty?()) {
      flag = false;
    } else {
      stack~push_back(out);
      slc = slc~load_ref().begin_parse();
      out = begin_cell();
    }
  }

  cell tail = out.end_cell();
  while (~ stack.is_null()) {
    builder next = stack~pop_back();
    next = store_ref(next, tail);
    tail = next.end_cell();
  }

  return tail;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return shift_text(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return shift_text(- shift, text);
}

