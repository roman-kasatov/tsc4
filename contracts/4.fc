{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(int) shift_letter(int shift, int letter) inline {
  shift = shift & 0xFF;
  if ((65 <= letter) & (letter <= 90)) { ;; A-Z
    return (letter + shift - 65) % 26 + 65;
  }
  if ((97 <= letter) & (letter <= 122)) { ;; a-z
    return (letter + shift - 97) % 26 + 65;
  }
  return letter;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  builder res = begin_cell().store_uint(0, 32);
  slice slc = text.begin_parse();
  slc~skip_bits(32);
  while (~ slc.slice_empty?()) {
    int letter = slc~load_uint(8);
    letter = shift_letter(shift, letter);
    res~store_uint(letter, 8);
  }
  return res.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  builder res = begin_cell().store_uint(0, 32);
  slice slc = text.begin_parse();
  slc~skip_bits(32);
  while (~ slc.slice_empty?()) {
    int letter = slc~load_uint(8);
    letter = shift_letter(- shift, letter);
    res~store_uint(letter, 8);
  }
  return res.end_cell();
}

