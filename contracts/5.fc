{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(tuple) mult_matrix(tuple A, tuple B) inline {
  tuple res = empty_tuple();

  tuple A_row = A.at(0);
  res~tpush(empty_tuple()
    .tpush(A_row.at(0) * B.at(0).at(0) + A_row.at(1) * B.at(1).at(0))
    .tpush(A_row.at(0) * B.at(0).at(1) + A_row.at(1) * B.at(1).at(1))
  );
  A_row = A.at(1);
  res~tpush(empty_tuple()
    .tpush(A_row.at(0) * B.at(0).at(0) + A_row.at(1) * B.at(1).at(0))
    .tpush(A_row.at(0) * B.at(0).at(1) + A_row.at(1) * B.at(1).at(1))
  );
  return res;
}

(tuple) bin_pow(tuple A, int pow) {
  tuple res = empty_tuple();
  res~tpush(empty_tuple().tpush(1).tpush(0));
  res~tpush(empty_tuple().tpush(0).tpush(1));

  while (pow) {
    if (pow & 1) {
      res = mult_matrix(res, A);
    }
    pow >>= 1;
    if (pow) {
      A = mult_matrix(A, A);
    }
  }
  return res;
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  ;; cur = 0, prev = 1
  tuple A = empty_tuple();
  A~tpush(empty_tuple().tpush(1).tpush(1));
  A~tpush(empty_tuple().tpush(1).tpush(0));
  A = bin_pow(A, n);

  tuple A_row = A.at(0);
  int cur = A_row.at(1);
  A_row = A.at(1);
  int prev = A_row.at(1);
  
  (prev, cur) = (cur - prev, prev);

  tuple res = empty_tuple();
  repeat (k) {
    (prev, cur) = (cur, prev + cur);
    res~tpush(cur);
  }
  return res;
}